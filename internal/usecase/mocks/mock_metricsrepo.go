// Code generated by MockGen. DO NOT EDIT.
// Source: metrics_usecase.go
//
// Generated by this command:
//
//	mockgen -source=metrics_usecase.go -destination=mocks/mock_metricsrepo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/vgnlkn/metrix/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricsRepository is a mock of MetricsRepository interface.
type MockMetricsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRepositoryMockRecorder
	isgomock struct{}
}

// MockMetricsRepositoryMockRecorder is the mock recorder for MockMetricsRepository.
type MockMetricsRepositoryMockRecorder struct {
	mock *MockMetricsRepository
}

// NewMockMetricsRepository creates a new mock instance.
func NewMockMetricsRepository(ctrl *gomock.Controller) *MockMetricsRepository {
	mock := &MockMetricsRepository{ctrl: ctrl}
	mock.recorder = &MockMetricsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRepository) EXPECT() *MockMetricsRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockMetricsRepository) All() []entity.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]entity.Metrics)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockMetricsRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockMetricsRepository)(nil).All))
}

// CreateMetrics mocks base method.
func (m *MockMetricsRepository) CreateMetrics(metric *entity.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetrics", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetrics indicates an expected call of CreateMetrics.
func (mr *MockMetricsRepositoryMockRecorder) CreateMetrics(metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).CreateMetrics), metric)
}

// FindMetrics mocks base method.
func (m *MockMetricsRepository) FindMetrics(name, vType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMetrics", name, vType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMetrics indicates an expected call of FindMetrics.
func (mr *MockMetricsRepositoryMockRecorder) FindMetrics(name, vType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).FindMetrics), name, vType)
}

// UpdateMetrics mocks base method.
func (m *MockMetricsRepository) UpdateMetrics(metric *entity.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricsRepositoryMockRecorder) UpdateMetrics(metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).UpdateMetrics), metric)
}
